<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.snowstone.snow.web.mapper.UserMapper">
	<resultMap id="BaseResultMap" type="com.snowstone.snow.web.model.User">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="account" jdbcType="VARCHAR" property="account" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="sex" jdbcType="INTEGER" property="sex" />
		<result column="orgId" jdbcType="INTEGER" property="orgId" />
		<result column="status" jdbcType="INTEGER" property="status" />
	</resultMap>
	<sql id="Base_Column_List">
		id, account, password, name, sex, orgId, status
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from snow_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		snow_user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.snowstone.snow.web.model.User">
		insert into snow_user (id,
		account, password,
		name, sex, orgId, status
		)
		values
		(#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{name,jdbcType=VARCHAR},
		#{sex,jdbcType=INTEGER}, #{orgId,jdbcType=INTEGER},
		#{status,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.snowstone.snow.web.model.User"
		useGeneratedKeys="true" keyProperty="id">
		insert into snow_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="account != null">
				account,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="orgId != null">
				orgId,
			</if>
			<if test="status != null">
				status,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="account != null">
				#{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=INTEGER},
			</if>
			<if test="orgId != null">
				#{orgId,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.snowstone.snow.web.model.User">
		update snow_user
		<set>
			<if test="account != null">
				account = #{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=INTEGER},
			</if>
			<if test="orgId != null">
				orgId = #{orgId,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.snowstone.snow.web.model.User">
		update snow_user
		set account = #{account,jdbcType=VARCHAR},
		password =
		#{password,jdbcType=VARCHAR},
		name = #{name,jdbcType=VARCHAR},
		sex =
		#{sex,jdbcType=INTEGER},
		orgId = #{orgId,jdbcType=INTEGER},
		status =
		#{status,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<resultMap type="com.snowstone.snow.web.model.User" id="selectUserMap">
		<id column="id" property="id" />
		<result column="account" property="account" />
		<result column="password" property="password" />
		<result column="name" property="name" />
		<result column="sex" property="sex" />
		<result column="orgId" property="orgId" />
		<result column="status" property="status" />
		<collection property="roleList" ofType="com.snowstone.snow.web.model.Role">
			<id column="id" jdbcType="INTEGER" property="id" />
			<result column="role_code" jdbcType="VARCHAR" property="roleCode" />
			<result column="role_name" jdbcType="VARCHAR" property="roleName" />
			<result column="status" jdbcType="INTEGER" property="status" />
			<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
			<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
		</collection>
	</resultMap>
	<select id="selectByAccount" parameterType="java.lang.String"
		resultMap="selectUserMap">
		select

		snow_user.id,snow_user.account,snow_user.password,snow_user.name,snow_user.sex,
		snow_user.orgId,snow_user.status,snow_role.role_code,snow_role.id,
		snow_role.role_name,snow_role.status,snow_role.create_time,snow_role.update_time

		from snow_user ,snow_role,snow_user_role
		where
		snow_user.id=snow_user_role.user_id and
		snow_role.id=snow_user_role.role_id
		and snow_user.account =
		#{account,jdbcType=VARCHAR}
	</select>

	<select id="selectAll" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from snow_user
	</select>



</mapper>